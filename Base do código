pip install requests

import requests

url = "https://docs.google.com/spreadsheets/d/1ubWnML_cP17MArgZrQuXVJe9OGaT00CRE9bUhRWP-6M/edit#gid=0"
nome_do_arquivo = "Cidades e pontos turísticos de Pernambuco"

# Download do arquivo
response = requests.get(url)

# Verificando se a requisição foi bem sucedida
if response.status_code == 200:
    # Salva o conteúdo do arquivo em um arquivo local
    with open(nome_do_arquivo, 'wb') as f:
        f.write(response.content)
    print("Arquivo baixado com sucesso!")
else:
    print("Falha ao baixar o arquivo.")


class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = []

    def add_edge(self, u, v, w):
        self.graph.append([u, v, w])

    def find(self, parent, i):
        if parent[i] == i:
            return i
        return self.find(parent, parent[i])

    def union(self, parent, rank, x, y):
        x_root = self.find(parent, x)
        y_root = self.find(parent, y)

        if rank[x_root] < rank[y_root]:
            parent[x_root] = y_root
        elif rank[x_root] > rank[y_root]:
            parent[y_root] = x_root
        else:
            parent[y_root] = x_root
            rank[x_root] += 1

    def kruskal_mst(self):
        result = []

        self.graph = sorted(self.graph, key=lambda item: item[2])

        parent = []
        rank = []

        for node in range(self.V):
            parent.append(node)
            rank.append(0)

        i = 0
        e = 0

        while e < self.V - 1 and i < len(self.graph):
            u, v, w = self.graph[i]
            i += 1
            x = self.find(parent, u)
            y = self.find(parent, v)

            if x != y:
                e += 1
                result.append([u, v, w])
                self.union(parent, rank, x, y)

        return result

# Criando o grafo com base nos dados fornecidos
g = Graph(90)

# Adicionando as arestas com pesos
edges = [
    ("Abreu e Lima", "Parque Natural Municipal Professor João Vasconcelos Sobrinho", 1),
    # Adicione as outras arestas com seus respectivos pesos aqui
]

for edge in edges:
    g.add_edge(edge[0], edge[1], edge[2])

# Encontrando a árvore geradora mínima usando o algoritmo de Kruskal
mst = g.kruskal_mst()

# Imprimindo a árvore geradora mínima
print("Árvore Geradora Mínima:")
for u, v, weight in mst:
    print(f"{u} - {v}: {weight}")
